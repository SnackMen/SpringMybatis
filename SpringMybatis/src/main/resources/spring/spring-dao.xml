<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


    <!--启用缓存注解功能，必须的，否则在代码中使用注解不会生效，另外该注解一定要声明在spring配置文件中才会生效-->
    <!--可以想象，如果想针对jdbc使用注解方式，是否也可以在配置文件中启用其注解功能-->
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>

    <!--配置数据库相关参数，使用数据库配置文件解耦-->
    <!--使用该标签spring会为我们建立一个Ben:propertyPlaceholderConfigurer,这个bean是实现了BeanFactoryPostProcessor这个接口，这个BeanFactoryPostProcessor会遍历容器中所有的bean 定义，并处理定义中的属性值、class name、方法名等等：-->
    <!--<context:property-placeholder location="classpath:jdbc.properties" />-->
    <!--两种加载配置文件方式，上面是加载一个配置文件，下面是加载多个配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!--针对druid数据库连接池进行配置-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--配置连接属性-->
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!--配置初始化大小，最小，最大-->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!--配置连接等待超时的时间-->
        <property name="maxWait" value="10000" />

        <!--配置隔多久需要进行一次检测，检测需要关闭的空闲连接，单位毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!--配置一个连接在池中最小生存的时间，单位毫秒-->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

        <property name="defaultAutoCommit" value="true" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />
        <property name="filters" value="stat" />
        <property name="proxyFilters">
            <list>
                <ref bean="logFilter" />
            </list>
        </property>
    </bean>

    <!--配置sqlsessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource" />
        <!--配置mybatis全局配置文件：mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!--扫描entity包，使用别名-->
        <property name="typeAliasesPackage" value="com.ws.vo" />
        <!--扫描sql配置文件：mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>



    <!--配置redis部分-->
    <!--配置jedis连接池-->
    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxTotal}" />
    </bean>

    <!--配置ConnectionFactory JedisConnectionFactory-->
    <bean id="redisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="poolConfig" ref="redisPoolConfig" />
    </bean>

    <!--配置redisTemplate-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnFactory" />
    </bean>

    <!--cache配置,这里采用的时自带的rediscachemanager,也可以采用自定义的cachemanager-->
    <!--在想要缓存的方法上使用注解@Cachenable或者@CacheEvict-->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
        <!--是否事务提交，如果事务回滚，缓存也回滚，默认false-->
        <property name="transactionAware" value="true" />
        <!--默认缓存有效期1d 3600*24-->
        <property name="defaultExpiration" value="86400" />
    </bean>

    <!--redisutil使用自定义的cachemanager时例子-->
    <!--<bean id="redisUtil" class="com.ws.utils.RedisUtil">-->
        <!--<property name="redisTemplate" ref="redisTemplate" />-->
    <!--</bean>-->

    <!--配置扫描Dao接口包，实现动态Dao接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!--给出需要扫描的Dao接口包-->
        <property name="basePackage" value="com.ws.dao" />
    </bean>

    <!--上面的druid配置-->
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecuteAfterLogEnabled" value="false" />
    </bean>
</beans>